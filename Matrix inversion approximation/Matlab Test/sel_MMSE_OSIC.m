function [ symOut ] = sel_MMSE_OSIC(y, H, SNR, M, pav,  symConstell )
% this subroutine performs the selection MMSE OSIC algorithm
% INPUT:
% y: received signal vector
% H: channel propagation matrix
% SNR: average receive signal to noise ratio
% symConstell: the symbol constellation
% OUTPUT:
% symOut: estimation of transmit symbol vector


Nr=length(H(:,1));   %number of receive antennas
Nt=length(H(1,:));   %number of transmit antennas
snr=SNR/Nt;      %symbol signal to noise ratio
%% Calculation of the number of antennas partitioned
% N=floor(sqrt(Nr+(1/4)*(Nr-Nt)^(2))-(1/2)*(Nr-Nt));
N=1;   %especially for 4 times 4 system
%% Channel Partion
H1=zeros(Nr,  N);   %the sub channel matrix selected in the first stage of partition
H2=zeros(Nr, Nt-N); %the sub channel matrix selected in the second stage of partition
Index1=zeros(N,1);   % the indexes vector of the channel selected in the first stage
Index2=zeros(Nt-N,1);   % the indexes vector of the channel selected in the second stage
[H1, H2, Index1, Index2]=Antenna_Sel(H, N, snr);   %diversity maximization antenna selection
%% List generation
listSize=M^(N); % the number of all the candidate symbol vector in the list
Eu=zeros(listSize, 1);    %the Euclidean distance of all the symbol vector candidates
symOut_sub1_M=zeros(N, listSize); %the matrix to store all the sub 1 transmit symbol vector candidates
symOut_sub2_M=zeros(Nt-N, listSize);   % the matrix to store all the sub 2 transmit symbol vector candidates
y_sub=zeros(Nr, listSize); %the residual observation vectors generated by IC from the first stage transmit symbol vector
interSub1=M*ones(1,N);  
indexSub1=fullfact(interSub1);  
indexSub1=indexSub1';   %indexes of exhaustive search
for count=1:listSize
symOut_sub1_M(:,count)=symConstell(indexSub1(:,count));
end
y_M=y*ones(1,listSize); 
y_sub=y_M-H1*symOut_sub1_M;   %calculate the residual observation matrix for the second stage detection

%% MMSE-OSIC
for count=1:listSize
    [symOut_sub2_M(:,count)]=MMSE_OSIC(y_sub(:,count), H2, snr, M, pav);      
end

%% MED selection
Eu_M=y_sub-H2*symOut_sub2_M;
for count=1:listSize
Eu(count)=norm(Eu_M(:,count))^(2);   %calculate the Euclidean distance of the candidate symbol vectors
end
[value, IndexEu]=min(Eu);   %choose the candidate with the minimum Euclidean distance
%% recombining the estimate transmit symbol vector
symOut=zeros(Nt,1); 
symSub1=symOut_sub1_M(:,IndexEu);
symSub2=symOut_sub2_M(:,IndexEu);
for count=1:length(symSub1)
    symOut(Index1(count))=symSub1(count);
end
for count=1:length(symSub2)
    symOut(Index2(count))=symSub2(count);
end


end